GlowSlayer defines a simple one line api to perform a file(s) integrity check
based upon a signed configuration file that contains hash/path recordset. All
internal details are abstracted away from the caller. This defines an API
module/kernel developers can easily add integrity checks to their code that will
survive pretty much any decisions made by developers of a distribution or
device.

GlowSlayer also defines a new LSM hook pre_init_kexecve. Tinfoil will be called
immediately before the kernel transitions to the desired init program. It will
fail the call to init if it detects failure. This will prevent zero days from
being able to alter files in the initramfs that might allow compromise of
encryption passwords upon reboot.

The final piece GlowSlayer defines in this initial release is a Slowboot module
that if the init program is configured to load it does the opposite of
"fastboot" essentially. Given the config file it will validate the config file.
It will then validate any files in the config file and print error messages and
fail module insertion via return code. This can be used to verify any file
visible to the system after LUKS decryption so it could detect changes in config
files, etc.

GlowSlayer does this in a completely agnostic manner. It does not depend on any
filesystem attributes or TPM existence. It also does this in a manner that could
be considered "Explicit Access Control". That fact is why it should be included
in the base kernel tree since it performs a similar function to dm-verity or
integrity but it does so in a manner with a radically different approach. The
goal is to allow the user to remove administration of the computer from the
running system. It is also done in a manner that is easy for the end user to
configure where the other methods typically require much greated administration
thought.

GlowSlayer also includes a special container struct that can hold a value.
It should be resistant to a rowhammer attack or accidental destruction of the
intended value via a bug in the code doing a string operation where a string
operation should not be performed. This is used to hold all the return values
that "stay around for a while" while cleanup happens.

One added benefit of having this code in the source tree is that it allows
the user to take control of their system in a manner they can assert it to be
true via compilation and setup of the system.
