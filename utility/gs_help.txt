/*******************************************************************************
*          ___   _                  ___   _                                    *
*         / __| | |  ___  __ __ __ / __| | |  __ _   _  _   ___   _ _          *
*        | (_-\ | | / _ \ \ V  V / \__ \ | | / _` | | || | / -_) | '_|         *
*         \___| |_| \___/  \_/\_/  |___/ |_| \__,_|  \_, | \___| |_|           *
*                                                    |__/                      *
*                         Dedicated to Terry A. Davis                          *
*******************************************************************************/


GlowSlayer Tinfoil/Slowboot Integration Guide

Currently Functional:
	Tinfoil Pre Init initramfs check
		(A physical access backdoor check)
	Slowboot Module post init filesystem check
		 (General check for compromise)

* obtain a copy of the kernel source
* unpack, etc

PsuedoCommand:
cp -r deployment/ /path/to/kernel/src

~ It is reccomended that you do this on a separate pc but for the first time
	doing it locally is fine
# Make Key Set
# The gs_key.pem is the one that should not reside on the target machine
openssl genrsa -aes256 -out gs_key.pem 4096
openssl rsa -in gs_key.pem -pubout -out gs_pub.pem
openssl asn1parse -inform PEM -in gs_pub.pem -strparse 19 -out gs_kernel.key

# This will get you the hex code to put into the menuconfig
xxd -c 999999999 -p gs_kernel.key


* GOTO kernel dir
vim init/main.c
###
# Add this around line 100 START :

#ifdef CONFIG_TINFOIL
#include <linux/gs_tinfoil.h>
#endif

# : STOP

#Make sure the function kernel_init has this bit (1526-1528):
### ~ Line numbers not guaranteed

1524         do_sysctl_args();
1525 
1526 #ifdef CONFIG_TINFOIL
1527         tinfoil_verify();
1528 #endif  
1529         if (ramdisk_execute_command) {
1530                 ret = run_init_process(ramdisk_execute_command);
1531                 if (!ret)
1532                         return 0;
1533                 pr_err("Failed to execute %s (error %d)\n",
1534                        ramdisk_execute_command, ret);
1535         }


###
:wq


////////////////////////////////////////////////////////////////////////////////
//openssl x509 -C -in my_signing_key_pub.der -inform DER                      //
//xxd -i siggywiggy.sha512                                                    //
//xxd -ps -c 9999999 siggywiggy.sha512 > siggywiggy.hex                       //
// It helps if you are using an RSA key                                       //
//openssl genrsa -aes256 -passout pass:<phrase> -out private.pem 4096         //
//openssl rsa -in private.pem -passin pass:<phrase> -pubout -out public.pem   //
//openssl dgst -sha512 -sign <private-key> -out /tmp/sign.sha512 <file>       //
//openssl base64 -in /tmp/sign.sha256 -out <signature>                        //
//openssl base64 -d -in <signature> -out /tmp/sign.sha256                     //
//openssl dgst -sha512 -verify <pub-key> -signature /tmp/sign.sha512 <file>   //
//openssl asn1parse -inform PEM -in public.pem -strparse 19 -out kernel.key   //
//xxd -i kernel.key                                                           //
//openssl rsa -in private.pem -passin pass:1111 -pubout -out public.pem       //
////////////////////////////////////////////////////////////////////////////////


